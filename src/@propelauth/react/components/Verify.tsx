import { Dispatch, MouseEvent, SetStateAction, SyntheticEvent, useState } from "react";
import { apiVerifyMfa } from "../api/verifyMfa";
import { Alert, Container, Input, Button, H3, Paragraph } from "../elements";
import { LoginState } from "../components";

export type VerifyProps = {
  setStep: Dispatch<SetStateAction<LoginState>>;
  // verifyAppearance?
};

export const Verify = ({ setStep }: VerifyProps) => {
  const [loading, setLoading] = useState(false);
  const [code, setCode] = useState("");
  const [useBackupCode, setUseBackupCode] = useState(false);
  const [error, setError] = useState<string | undefined>(undefined);

  const codeLabel = `Enter the 6 digit code generated by your authenticator app:`;
  const backupCodeLabel = `Enter an unused backup code:`;
  const inputLabel = useBackupCode ? backupCodeLabel : codeLabel;

  const codeButtonText = `Enter a code from your authenticator app`;
  const backupCodeButtonText = `Lost your device? Enter a backup code`;
  const buttonText = useBackupCode ? codeButtonText : backupCodeButtonText;

  function toggleCodeType(e: MouseEvent<HTMLButtonElement>) {
    e.preventDefault();
    setCode("");
    setError(undefined);
    setUseBackupCode(!useBackupCode);
  }

  async function verifyMfa(e: SyntheticEvent) {
    try {
      e.preventDefault();
      setLoading(true);
      setError(undefined);
      const verifyMfaResult = await apiVerifyMfa({
        code,
        isBackupCode: useBackupCode,
      });
      setStep(verifyMfaResult.next_step);
    } catch (e) {
      console.error(e);
    } finally {
      setLoading(false);
    }
  }

  return (
    <Container className={"pa_container"}>
      <H3>{useBackupCode ? "Verify Backup Code" : "Verify"}</H3>
      <form onSubmit={verifyMfa}>
        <Paragraph>{inputLabel}</Paragraph>
        <div>
          <Input
            type={"text"}
            placeholder={"123456"}
            value={code}
            onChange={(e) => setCode(e.target.value)}
            className={"pa_input"}
          />
        </div>
        <Button loading={loading} className={"pa_button pa_button--action"}>
          {useBackupCode ? "Verify Backup Code" : "Verify"}
        </Button>
        {error && <Alert type={"error"}>{error}</Alert>}
      </form>
      <div className="pa_bottom-links">
        <Button onClick={toggleCodeType} className={"pa_button pa_button--minimal"}>
          {buttonText}
        </Button>
      </div>
    </Container>
  );
};
